{"version":3,"sources":["components/Logo/Logo.tsx","components/Nav/Nav.tsx","components/Header/Header.tsx","pages/AboutPage/AboutPage.tsx","components/Digit/Digit.tsx","components/NumberDisplay/NumberDisplay.tsx","constants/gameConst.ts","constants/cellConst.ts","hooks/useGame.ts","components/Smiley/Smiley.tsx","components/Timer/Timer.tsx","components/GameHead/GameHead.tsx","components/Cell/Cell.tsx","components/GameBody/GameBody.tsx","components/Gameboard/Gameboard.tsx","pages/HomePage/HomePage.tsx","components/Routes/Routes.tsx","components/Footer/Footer.tsx","App.tsx","store/game/game.reducers.ts","store/rootReducer.ts","store/store.ts","index.tsx"],"names":["Logo","className","to","Nav","Header","AboutPage","Digit","style","backgroundPositionX","display","NumberDisplay","displayArr","toString","padStart","split","map","digit","i","Number","gameConst","beginner","width","height","numMines","intermediate","boss","cellConst","states","untouched","flagged","unknown","checked","exploded","useGame","dispatch","useDispatch","game","useSelector","state","checkWinState","cells","numMinesFlagged","numChecked","forEach","cell","isMine","console","log","length","initGameCB","useCallback","difficultyLevel","level","minesArr","Array","fill","safeArr","cellsArr","sort","Math","random","isTop","isRight","isBottom","isLeft","n","ne","e","se","s","sw","w","nw","count","id","toDispatch","type","numMinesRemaining","gameOverCB","gameOverCells","gCell","checkCellCB","isGameActive","isGameOver","localCells","checkCellState","isWinner","error","localCell","checkNearbyCells","getNumMinesRemainingCB","reduce","prev","curr","setFlagStateCB","cellState","cellId","FACES","Smiley","isGameWon","useState","face","setFace","useEffect","onMouseDown","onMouseUp","Timer","setCount","interval","setInterval","clearInterval","GameHead","CELL_STATES","UNTOUCHED","x","y","EMPTY","FLAGGED","UNKNOWN","EXPLODED","Cell","getX","backgroundPositionY","getY","color","onContextMenu","event","preventDefault","onClick","GameBody","React","memo","Gameboard","HomePage","Routes","path","Footer","App","initialState","timer","action","combineReducers","store","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c53ba1f3.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Logo.scss';\n\nconst Logo: React.FC = () => {\n  return (\n    <div className=\"logo\">\n      <Link to=\"/\">ReactSweeper</Link>\n    </div>\n  );\n};\n\nexport default Logo;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Nav.scss';\n\nconst Nav: React.FC = () => {\n  return (\n    <nav className=\"nav\">\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport Logo from '../Logo/Logo';\nimport Nav from '../Nav/Nav';\nimport './Header.scss';\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"header\">\n      <Logo />\n\n      <Nav />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst AboutPage: React.FC = () => {\n  return (\n    <div className=\"about-page page\">\n      <h2>About</h2>\n\n      <p>Thanks for checking out our app! Our team built this app to learn the concepts for\n\n        <ul>\n          <li>React</li>\n          <li>Redux</li>\n          <li>React Router</li>\n          <li>TypeScript</li>\n          <li>React Hooks</li>\n        </ul>\n      </p>\n\n      <p>\n        <strong>Team B-Nazty&trade;</strong> is a group of engineers varying in experience and skill levels. We meet weekly to discuss current trends and to share ideas and concepts.\n        And more importantly, we meet to work on projects together. Fun projects, like unneccesarily rewriting minesweeper in React JS. No one asked for it,\n        but here it is. You are welcome.\n      </p>\n    </div>\n  );\n};\n\nexport default AboutPage;\n","import React from 'react';\nimport './Digit.scss';\n\ninterface IProps {\n  display: number;\n}\n\nconst WIDTH = 13;\n\nconst Digit: React.FC<IProps> = ({ display }) => {\n  const style = {\n    backgroundPositionX: -WIDTH * display\n  };\n\n  return (\n    <div className=\"digit\" style={style} />\n  );\n};\n\nexport default Digit;\n","import React from 'react';\nimport Digit from '../Digit/Digit';\nimport './NumberDisplay.scss';\n\ninterface IProps {\n  display: number;\n}\n\nconst NumberDisplay: React.FC<IProps> = ({ display }) => {\n  const displayArr = display.toString().padStart(3, '0').split('');\n\n  return (\n    <div className=\"number-display bevel-down\">\n      {displayArr.map((digit: string, i: number) => (\n        <Digit display={Number(digit)} key={i} />\n      ))}\n    </div>\n  );\n};\n\nexport default NumberDisplay;\n","interface GameConst {\n  [key: string]: GameLevel;\n}\n\ninterface GameLevel {\n  width: number;\n  height: number;\n  numMines: number;\n}\n\nconst gameConst: GameConst = {\n  beginner: {\n    width: 9,\n    height: 9,\n    numMines: 10\n  },\n  intermediate: {\n    width: 9,\n    height: 9,\n    numMines: 10\n  },\n  boss: {\n    width: 9,\n    height: 9,\n    numMines: 10\n  }\n};\n\nexport default gameConst;","const cellConst = {\n  states: {\n    untouched: 'UNTOUCHED',\n    flagged: 'FLAGGED',\n    unknown: 'UNKNOWN',\n    checked: 'CHECKED',\n    exploded: 'EXPLODED'\n  }\n};\n\nexport default cellConst;","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport gameConst from '../constants/gameConst';\nimport { Action } from '../store/game/game.actions';\nimport cellConst from '../constants/cellConst';\n\nconst useGame = () => {\n  const dispatch = useDispatch();\n  const game = useSelector((state: RS.Store) => state.game);\n\n  function checkWinState(cells: RS.Cell[]): boolean {\n    let numMinesFlagged = 0;\n    let numMines = 0;\n    let numChecked = 0;\n\n    cells.forEach((cell: RS.Cell) => {\n      if (cell.state === cellConst.states.flagged && cell.isMine) {\n        numMinesFlagged++;\n      }\n\n      if (cell.isMine) {\n        numMines++;\n      }\n\n      if (cell.state === cellConst.states.checked) {\n        numChecked++;\n      }\n    });\n\n    console.log({ numMines, numMinesFlagged, numChecked})\n\n    // 1. number of flags === number of mines && flag === isMine\n    // 2. all cells checked\n    return numMines === numMinesFlagged\n      || cells.length - numMines === numChecked;\n  }\n\n  const initGameCB = useCallback((difficultyLevel: string) => {\n    console.log('init game cb');\n    const level = gameConst[difficultyLevel];\n\n    const minesArr = Array(level.numMines).fill({ isMine: true });\n    const safeArr = Array(level.width * level.height - level.numMines).fill({ isMine: false });\n\n    const cellsArr = [...minesArr, ...safeArr].sort(() => Math.random() - 0.5);\n    // caution level\n    const cells = cellsArr.map((cell: RS.Cell, i: number) => {\n      const isTop = i < level.width;\n      const isRight = i > 0 && (i + 1) % level.width === 0;\n      const isBottom = i >= (level.width - 1) * level.height;\n      const isLeft = i % level.width === 0;\n\n      const n = i - level.width;\n      const ne = i - level.width + 1;\n      const e = i + 1;\n      const se = i + level.width + 1;\n      const s = i + level.width;\n      const sw = i + level.width - 1;\n      const w = i - 1;\n      const nw = i - level.width - 1;\n      \n      let count = 0;\n      if (!isTop && cellsArr[n]?.isMine) {\n        count++;\n      }\n\n      if (!isTop && !isRight && cellsArr[ne]?.isMine) {\n        count++;\n      }\n\n      if (!isRight && cellsArr[e]?.isMine) {\n        count++;\n      }\n\n      if (!isRight && !isBottom && cellsArr[se]?.isMine) {\n        count++;\n      }\n\n      if (!isBottom && cellsArr[s]?.isMine) {\n        count++;\n      }\n\n      if (!isBottom && !isLeft && cellsArr[sw]?.isMine) {\n        count++;\n      }\n\n      if (!isLeft && cellsArr[w]?.isMine) {\n        count++;\n      }\n\n      if (!isTop && !isLeft && cellsArr[nw]?.isMine) {\n        count++;\n      }\n\n      return {\n        ...cell,\n        count,\n        id: i,\n        state: cellConst.states.untouched\n      };\n    });\n\n    console.log({ cells });\n\n    const toDispatch: Action = {\n      type: 'init.game',\n      height: level.height,\n      numMines: level.numMines,\n      numMinesRemaining: level.numMines,\n      width: level.width,\n      cells,\n      difficultyLevel\n    };\n\n    dispatch(toDispatch);\n  }, [dispatch]);\n\n  const gameOverCB = useCallback((cell: RS.Cell) => {\n    const gameOverCells = game.cells.map((gCell: RS.Cell) => {\n      if (gCell.state === cellConst.states.flagged) {\n        return gCell;\n      }\n\n      return {\n        ...gCell,\n        state: cell.id === gCell.id\n          ? cellConst.states.exploded\n          : cellConst.states.checked\n      };\n    });\n\n    console.log({gameOverCells})\n\n    const toDispatch: Action = {\n      type: 'game.over',\n      cells: gameOverCells\n    };\n    dispatch(toDispatch);\n  }, [dispatch, game]);\n\n  const checkCellCB = useCallback((cell: RS.Cell) => {\n    if (!game.isGameActive && !game.isGameOver) {\n      const toGameActiveDispatch: Action = {\n        type: 'game.start'\n      };\n      dispatch(toGameActiveDispatch);\n    }\n    \n    let localCells = [...game.cells];\n    const isGameOver = checkCellState(cell);\n    const isWinner = checkWinState(localCells);\n\n    checkWinState(localCells);\n\n    if (!isGameOver) {\n      const toDispatch: Action = {\n        type: 'update.cells',\n        cells: localCells\n      };\n      dispatch(toDispatch);\n    }\n\n    if (isWinner) {\n      const toDispatch: Action = {\n        type: 'game.won'\n      };\n      dispatch(toDispatch);\n    }\n\n    /**\n     * \n     */\n    function checkCellState(cell: RS.Cell) {\n      if (cell.state === cellConst.states.checked) {\n        return false;\n      }\n\n      // is mine\n      if (cell.isMine) {\n        console.error(' BOOM! ');\n        gameOverCB(cell);\n        return true;\n      }\n\n      // is game over\n      if (game.isGameOver) {\n        return true;\n      }\n\n      // if flagged || unknown\n      if (cell.state === cellConst.states.flagged || cell.state === cellConst.states.unknown) {\n        return false;\n      }\n\n      localCells = localCells.map((localCell: RS.Cell) => {\n        return localCell.id === cell.id\n          ? {\n              ...localCell,\n              state: cellConst.states.checked\n            }\n          : localCell\n      });\n\n      // if count is 0\n      if (cell.count === 0) {\n        checkNearbyCells(cell);\n      }\n    }\n\n    /**\n     * \n     */\n    function checkNearbyCells(cell: RS.Cell) {\n      const isTop = cell.id < game.width;\n      const isRight = cell.id > 0 && (cell.id + 1) % game.width === 0;\n      const isBottom = cell.id >= (game.width - 1) * game.height;\n      const isLeft = cell.id % game.width === 0;\n  \n      const n = cell.id - game.width;\n      const ne = cell.id - game.width + 1;\n      const e = cell.id + 1;\n      const se = cell.id + game.width + 1;\n      const s = cell.id + game.width;\n      const sw = cell.id + game.width - 1;\n      const w = cell.id - 1;\n      const nw = cell.id - game.width - 1;\n  \n      if (!isTop) {\n        checkCellState(localCells[n]);\n      }\n\n      if (!isTop && !isRight) {\n        checkCellState(localCells[ne]);\n      }\n\n      if (!isRight) {\n        checkCellState(localCells[e]);\n      }\n\n      if (!isRight && !isBottom) {\n        checkCellState(localCells[se]);\n      }\n\n      if (!isBottom) {\n        checkCellState(localCells[s]);\n      }\n\n      if (!isBottom && !isLeft) {\n        checkCellState(localCells[sw]);\n      }\n\n      if (!isLeft) {\n        checkCellState(localCells[w]);\n      }\n\n      if (!isLeft && !isTop) {\n        checkCellState(localCells[nw]);\n      }\n    }\n  }, [dispatch, game, gameOverCB]);\n\n  const getNumMinesRemainingCB = useCallback((cells: RS.Cell[], numMines: number): number => {\n    const numFlags = cells.reduce((prev, curr) => {\n      return curr.state === cellConst.states.flagged\n        ? prev + 1\n        : prev;\n    }, 0);\n  \n    return numMines - numFlags;\n  }, []);\n\n  const setFlagStateCB = useCallback((cell: RS.Cell) => {\n    let cellState = cell.state;\n\n    const numMinesRemaining = getNumMinesRemainingCB(game.cells, game.numMines);\n\n    switch (cell.state) {\n      case cellConst.states.untouched:\n        if (numMinesRemaining === 0) {\n          return;\n        }\n        cellState = cellConst.states.flagged;\n        break;\n\n      case cellConst.states.flagged:\n        cellState = cellConst.states.unknown;\n        break;\n\n      case cellConst.states.unknown:\n        cellState = cellConst.states.untouched;\n        break;\n    }\n\n    const localCells = game.cells.map((localCell: RS.Cell) => {\n      if (localCell.id === cell.id) {\n        return {\n          ...localCell,\n          state: cellState\n        }\n      }\n\n      return localCell;\n    });\n    const isWinner = checkWinState(localCells);\n    if (isWinner) {\n      const toWinnnerDispatch: Action = {\n        type: 'game.won'\n      };\n      dispatch(toWinnnerDispatch)\n    }\n\n    const toDispatch: Action = {\n      type: 'check.cell',\n      cellId: cell.id,\n      state: cellState\n    };\n    dispatch(toDispatch);\n  }, [dispatch, game, getNumMinesRemainingCB]);\n\n  return {\n    initGameCB,\n    gameOverCB,\n    checkCellCB,\n    setFlagStateCB,\n    getNumMinesRemainingCB\n  };\n};\n\nexport default useGame;","import React, { useEffect, useState } from 'react';\nimport useGame from '../../hooks/useGame';\nimport './Smiley.scss';\n\nconst FACES = {\n  UP: 'up',\n  DOWN: 'down',\n  EXPLODED: 'exploded',\n  WIN: 'win'\n};\n\ninterface IProps {\n  isGameOver: boolean;\n  difficultyLevel: string;\n  isGameWon: boolean;\n}\n\nconst Smiley: React.FC<IProps> = ({ difficultyLevel, isGameOver, isGameWon }) => {\n  const [face, setFace] = useState<string>(FACES.UP);\n\n  const { initGameCB } = useGame();\n\n  useEffect(() => {\n    if (isGameOver && !isGameWon) {\n      setFace(FACES.EXPLODED);\n    } else if (isGameWon) {\n      setFace(FACES.WIN);\n    }\n  }, [isGameOver, isGameWon]);\n\n  const handleMouseDown = () => {\n    setFace(FACES.DOWN);\n  };\n\n  const handleMouseUp = () => {\n    setFace(FACES.UP);\n    initGameCB(difficultyLevel);\n  };\n\n  return (\n    <div \n      className={`smiley ${face}`} \n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n    />\n  );\n};\n\nexport default Smiley;\n","import React, { useEffect, useState } from 'react';\nimport NumberDisplay from '../NumberDisplay/NumberDisplay';\n\ninterface IProps {\n  isGameActive: boolean;\n}\n\nconst Timer: React.FC<IProps> = ({ isGameActive }) => {\n  const [count, setCount] = useState<number>(0);\n\n  useEffect(() => {\n    let interval: any = null;\n\n    if (isGameActive) {\n      interval = setInterval(() => {\n        setCount((count: number) => count + 1);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n      setCount(0);\n    }\n\n    return () => clearInterval(interval);\n  }, [isGameActive]);\n\n  return (\n    <NumberDisplay display={count} />\n  );\n};\n\nexport default Timer;\n","import React from 'react';\nimport NumberDisplay from '../NumberDisplay/NumberDisplay';\nimport Smiley from '../Smiley/Smiley';\nimport Timer from '../Timer/Timer';\nimport './GameHead.scss';\n\ninterface IProps {\n  numMinesRemaining: number;\n  game: RS.Game;\n}\n\nconst GameHead: React.FC<IProps> = ({ game, numMinesRemaining }) => {\n  return (\n    <div className=\"game-head bevel-down\">\n      <NumberDisplay display={numMinesRemaining} />\n\n      <Smiley isGameOver={game.isGameOver} difficultyLevel={game.difficultyLevel} isGameWon={game.isGameWon} />\n      \n      <Timer isGameActive={game.isGameActive} />\n    </div>\n  );\n};\n\nexport default GameHead;\n","import React from 'react';\nimport useGame from '../../hooks/useGame';\nimport cellConst from '../../constants/cellConst';\nimport './Cell.scss';\n\ninterface IProps {\n  id: number;\n  cell: RS.Cell;\n}\n\ninterface flagStates {\n  [key: string]: flagState;\n}\n\ninterface flagState {\n  state: string;\n  x: number;\n  y: number;\n}\n\nconst CELL_STATES: flagStates = {\n  UNTOUCHED: {\n    state: 'untouched',\n    x: 0,\n    y: -39\n  },\n  EMPTY: {\n    state: 'empty',\n    x: 0,\n    y: -23\n  },\n  FLAGGED: {\n    state: 'flag',\n    x: -16,\n    y: -39\n  },\n  UNKNOWN: {\n    state: 'unknown',\n    x: -80,\n    y: -39\n  },\n  EXPLODED: {\n    state: 'exploded',\n    x: -32,\n    y: -39\n  }\n};\n\nconst MINE_X_POSITION = -64;\nconst MINE_Y_POSITION = -39;\nconst CELL_WIDTH = 16;\nconst NUMBER_Y_POSITION = -23;\n\nconst Cell: React.FC<IProps> = ({ id, cell }) => {\n  const { checkCellCB, setFlagStateCB } = useGame();\n\n  const handleRightClick = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    setFlagStateCB(cell);\n  };\n\n  const handleClick = () => {\n    checkCellCB(cell);\n  };\n\n  function getX(): number {\n    switch (cell.state) {\n      case cellConst.states.untouched:\n      case cellConst.states.flagged:\n      case cellConst.states.unknown:\n      case cellConst.states.exploded:\n        return CELL_STATES[cell.state].x;\n    }\n\n    if (cell.isMine) {\n      return MINE_X_POSITION;\n    }\n\n    if (cell.count > 0) {\n      return -CELL_WIDTH * cell.count;\n    }\n\n    return 0;\n  }\n\n  function getY(): number {\n    switch (cell.state) {\n      case cellConst.states.untouched:\n      case cellConst.states.flagged:\n      case cellConst.states.unknown:\n      case cellConst.states.exploded:\n        return CELL_STATES[cell.state].y;\n    }\n\n    if (cell.isMine) {\n      return MINE_Y_POSITION;\n    }\n\n    return NUMBER_Y_POSITION;\n  }\n\n  const style = {\n    backgroundPositionX: getX(),\n    backgroundPositionY: getY(),\n    color: cell.isMine ? 'red' : 'black'\n  }\n\n  return (\n    <div \n      className=\"cell\" \n      onContextMenu={handleRightClick}\n      onClick={handleClick}\n      style={style}\n    >\n      {/* {cell.id}:{cell.count} */}\n    </div>\n  );\n};\n\nexport default Cell;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Cell from '../Cell/Cell';\nimport './GameBody.scss';\n\ninterface IProps {\n  width: number;\n  height: number;\n}\n\nconst CELL_WIDTH = 16;\n\nconst GameBody: React.FC<IProps> = ({ width, height }) => {\n  const { cells } = useSelector((state: RS.Store) => state.game);\n\n  console.log('rendering game body');\n  const style = {\n    width: CELL_WIDTH * width\n  };\n\n  return (\n    <div className=\"game-body bevel-down\" style={style}>\n      {cells.map((cell, i) => (\n        <Cell key={i} id={i} cell={cell} />\n      ))}\n    </div>\n  );\n};\n\nexport default React.memo(GameBody);\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport GameHead from '../GameHead/GameHead';\nimport GameBody from '../GameBody/GameBody';\nimport useGame from '../../hooks/useGame';\nimport './Gameboard.scss';\n\nconst Gameboard: React.FC = () => {\n  const game = useSelector((state: RS.Store) => {\n    return state.game;\n  });\n\n  const { initGameCB, getNumMinesRemainingCB } = useGame();\n\n  const numMinesRemaining = getNumMinesRemainingCB(game.cells, game.numMines);\n\n  useEffect(() => {\n    const difficultyLevel = 'beginner';\n    initGameCB(difficultyLevel);\n  }, [initGameCB]);\n\n  return (\n    <div className=\"gameboard bevel-up\">\n      <GameHead\n        game={game} \n        numMinesRemaining={numMinesRemaining} \n      />\n\n      <GameBody width={game.width} height={game.height} />\n    </div>\n  )\n};\n\nexport default Gameboard;","import React from 'react';\nimport Gameboard from '../../components/Gameboard/Gameboard';\nimport './HomePage.scss';\n\nconst HomePage: React.FC = () => {\n  return (\n    <div className=\"home-page\">\n      <Gameboard />\n    </div>\n  )\n};\n\nexport default HomePage;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport AboutPage from '../../pages/AboutPage/AboutPage';\nimport HomePage from '../../pages/HomePage/HomePage';\n\nconst Routes: React.FC = () => {\n  return (\n    <div className=\"routes\">\n      <Switch>\n        <Route path=\"/about\">\n          <AboutPage />\n        </Route>\n\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport './Footer.scss';\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"footer\">\n      ReactSweeper&trade; &copy; 2020 B-Nazty, Inc.\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport Routes from './components/Routes/Routes';\nimport Footer from './components/Footer/Footer';\nimport './App.scss';\nimport './styles/global.scss';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n\n      <main>\n        <Routes />\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { Action } from './game.actions';\n\nconst initialState: RS.Game = {\n  cells: [],\n  height: 0,\n  numMines: 0,\n  numMinesRemaining: 0,\n  timer: 0,\n  width: 0,\n  isGameOver: false,\n  isGameActive: false,\n  isGameWon: false,\n  difficultyLevel: 'beginner'\n};\n\nfunction game(state = initialState, action: Action) {\n  switch (action.type) {\n    case 'init.game':\n      return {\n        ...state,\n        ...action,\n        isGameOver: false,\n        isGameActive: false,\n        isGameWon: false,\n        difficultyLevel: action.difficultyLevel\n      };\n    \n    case 'game.start':\n      return {\n        ...state,\n        isGameActive: true\n      };\n\n    case 'game.won':\n      return {\n        ...state,\n        isGameActive: false,\n        isGameOver: true,\n        isGameWon: true\n      };\n\n    case 'game.over':\n      return {\n        ...state,\n        isGameOver: true,\n        isGameActive: false,\n        isGameWon: false,\n        cells: action.cells\n      };\n\n    case 'check.cell':\n      return {\n        ...state,\n        cells: state.cells.map((cell: RS.Cell) => {\n          if (cell.id === action.cellId) {\n            return {\n              ...cell,\n              state: action.state\n            };\n          }\n\n          return cell;\n        })\n      };\n\n    case 'update.cells':\n      return {\n        ...state,\n        cells: action.cells\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default game;","import { combineReducers } from 'redux';\nimport game from './game/game.reducers';\n\nexport default combineReducers({\n  game\n});","import { createStore } from 'redux';\nimport rootReducer from './rootReducer';\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}